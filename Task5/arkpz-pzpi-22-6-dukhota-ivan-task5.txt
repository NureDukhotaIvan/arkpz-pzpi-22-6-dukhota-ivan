
Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Кафедра програмної інженерії




ЗВІТ
До лабораторної роботи №5
З дисципліни «Аналіз та рефакторинг коду»




Виконав: 										   Перевірив:
ст. гр. ПЗПІ-22-6								    ст. викл. каф. ПІ.
Духота І. Є.  								        Сокорчук І. П.











Харків 2024
1. РОЗРОБКА VISION & SCOPE
1.1 Мета роботи
Розгорнути розроблений проект та функціонально застосувати зазначені у пункті 2.2 Vision & Scope.
1.2 Хід роботи
1.2.1 Налаштування бази даних (Neon PostgreSQL)
Для зберігання даних у проекті було обрано хмарний сервіс Neon, який надає керовані інстанси PostgreSQL. Нижче наведено основні кроки, виконані для налаштування бази даних:
- 	Реєстрація та створення проекту в Neon: Зареєструвалися на сайті neon.tech, створили безкоштовний проект. У межах цього проекту було ініціалізовано інстанс PostgreSQL з робочою назвою, наприклад, SchoolDef.
- 	Налаштування інстансу: встановлено всі необхідні дані. Увімкнено шифрування (sslmode=require) для безпечного з’єднання з базою. Встановлено регіон, найближчий до користувача (Frankfurt). 
- 	Автоматичні резервні копії та керування даними: Neon за замовчуванням зберігає історію змін (point-in-time recovery) та створює бекапи, що дає змогу відкотитися до попереднього стану або створити новий «Branch» із будь-якої точки часу.
- 	З’єднання з локальним оточенням: У консолі Neon було згенеровано рядок підключення (DATABASE_URL).

 
Рисунок 1.2.1.1 – Налаштування інстансу у Neon

 
1.2.1.2 – Додаткова інформація 

1.2.2 Деплой додатку у Render
Для розгортання Django-додатку було обрано хмарний сервіс Render, що надає можливість безкоштовного (з обмеженнями) хостингу веб-сервісів. Проект із Django DRF було взято з власного репозиторію за допомогою команди: git clone https://github.com/IvanDukhota/SchoolDefDrf.git. Після клонування проекту було виконано перехід у його директорію за допомогою команди: cd SchoolDefDrf.
Налаштування конфігурації:
- 	У файлі settings.py було прописано змінну DATABASE_URL, отриману з Neon.
- 	Додано пакет dj_database_url та інші необхідні залежності в requirements.txt.
- 	Перевірено, що ALLOWED_HOSTS містить 'schooldef.onrender.com'.
Створення та налаштування сервісу на Render:
- 	У панелі Render обрано «New +» → «Web Service».
- 	Підключено репозиторій та вказано гілку main.
- 	Для нативного деплою було додано: Build Command: pip install -r requirements.txt та Start Command: gunicorn school_security.wsgi:application.
- 	Зазначено змінні оточення (Environment Variables), зокрема DATABASE_URL (рядок підключення до Neon) та SECRET_KEY.

Після усіх перевірок було розгорнуто проект у хмарному середовищі Render за допомогою команди: gunicorn school_security.wsgi:application. Після успішного деплоя відвідано посилання https://schooldef.onrender.com на якому впевнився, що додаток відповідає.

 
Рисунок 1.2.2.1 – Налаштування Render

 
Рисунок 1.2.2.2 – Змінні оточення для Render
1.2.3 Міграція даних
Для ініціалізації структури бази даних (таблиці, зв’язки тощо) в Neon використовуються Django міграції: У локальній консолі було запущено команду: python manage.py migrate з посиланням на Neon. Django створив усі необхідні таблиці (User, Student, Staff, Sensor, Camera тощо) у базі SchoolDef на Neon.

1.3 Висновок:
Під час виконання лабораторної роботи було розгорнуто розроблений проект та функціонально затестовано зазначені у пункті 2.2 Vision & Scope.
Посилання на відеозапис: https://youtu.be/3qiApXwSD7c
