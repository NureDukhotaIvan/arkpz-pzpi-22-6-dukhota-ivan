
Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Кафедра програмної інженерії




ЗВІТ
До лабораторної роботи №3 
З дисципліни «Аналіз та рефакторинг коду»




Виконав: 										   Перевірив:
ст. гр. ПЗПІ-22-6								    ст. викл. каф. ПІ.
Духота І. Є.  								        Сокорчук І. П.











Харків 2024
РОЗРОБКА БІЗНЕС-ЛОГІКИ ТА ФУНКЦІЙ АДМІНІСТРУВАННЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ

2. Мета роботи
Розробити бізнес-логику та функції адміністрування серверної частини  програмної системи.
3. Хід роботи
3.1. Розробити бізнес логіку серверної частини програмної системи.
3.1.1 Функція SecurityEffectivenessView для обчислення Індексу Ефективності Безпеки (SEI).
- Алгоритм:
1) Збір даних:
- 	Отримати загальну кількість сенсорів та камер з бази даних.
- 	Визначити кількість активних сенсорів та камер (status=True).
- 	Зібрати всі записи про інциденти та їхні показники серйозності.
- 	Підрахувати загальну кількість студентів та записи про їхню присутність.

2) Обчислення показників:
- 	Покриття сенсорів: Розрахувати відсоток активних сенсорів від загальної кількості.
- 	Покриття камер: Розрахувати відсоток активних камер від загальної кількості.
- 	Частота інцидентів: Визначити відносну частоту інцидентів на основі загальної кількості інцидентів та їх середньої серйозності.
- 	Рівень присутності: Обчислити відсоток присутності студентів за визначений період.
- 	Індекс серйозності: Нормалізувати середній показник серйозності інцидентів до визначеного максимального значення.


3) Розрахунок Індексу Ефективності Безпеки (SEI):
- 	Застосувати вагові коефіцієнти до кожного з обчислених показників.
- 	Сумувати всі вагові множники та нормалізувати результат до діапазону від 0 до 1.
- 	Округлити SEI до двох десяткових знаків для зручності відображення.

4) Формування звіту:
- 	Створити структурований звіт, що містить SEI та детальні показники для кожного аспекту безпеки.
- 	Повернути звіт у форматі JSON для подальшого використання або візуалізації.

3.1.2. IncidentStatisticsView
- Алгоритм:
1) Збір даних:
- 	Отримати всі записи про інциденти з бази даних.
- 	Визначити категорії інцидентів та їх кількість.
- 	Визначити часові рамки (наприклад, поточний місяць, квартал, рік) для аналізу.

2) Обробка даних:
- 	Підрахувати кількість інцидентів у кожній категорії.
- 	Визначити тенденції за певні періоди (зростання чи зменшення кількості інцидентів).
- 	Аналізувати серйозність інцидентів та їх вплив на загальний стан безпеки.

3) Розрахунок статистичних показників:
- 	Середня кількість інцидентів: Визначити середню кількість інцидентів за обраний період.
- 	Мінімальна та максимальна кількість інцидентів: Виявити екстремальні значення для оцінки варіативності.
- 	Розподіл інцидентів за категоріями: Визначити, які категорії інцидентів найпоширеніші.

4) Формування звіту:
- 	Створити детальний звіт, що включає всі статистичні показники та аналіз тенденцій.
- 	Представити дані у зручному форматі для подальшого аналізу або презентації.
- 	Повернути звіт у форматі JSON для використання у фронтенд додатках або інших системах.

3.1.3. Бізнес логіка для відправки повідомлень всім користувачам про інцидент, якщо у стовпці report стоїть True
- Алгоритм:
1) Моніторинг інцидентів:
- 	Періодично перевіряти базу даних на наявність нових інцидентів, де стовпець report встановлено на True.
- 	Визначити, які інциденти вимагають повідомлення користувачів.

2) Збір користувачів:
- 	Отримати список всіх зареєстрованих користувачів системи, які повинні отримувати повідомлення.
- 	Переконатися, що користувачі мають валідні контактні дані (наприклад, електронні адреси).

3) Створення повідомлень:
- 	Для кожного інциденту, що відповідає критерію, сформувати повідомлення, яке містить:
- 	Ідентифікатор інциденту.
- 	Опис інциденту та його серйозність.
- 	Рекомендації щодо подальших дій.

4) Відправка повідомлень:
Використати поштовий сервіс або API для масової відправки електронних листів.
Забезпечити, що повідомлення доставляються до всіх цільових користувачів.
Логувати статус відправки повідомлень для подальшого аудиту та відстеження.

3.2. Розробити функції адміністрування серверної частини програмної системи.
3.2.1. Адміністратор міграцій та резервного копіювання бази даних
- Алгоритм:
1) Виконання міграцій бази даних:
- 	Ініціювати процес створення нових міграційних файлів на основі змін у моделях.
- 	Застосувати міграції для оновлення структури бази даних відповідно до нових вимог.
- 	Перевірити успішність виконання міграцій та обробити можливі помилки.

2) Створення резервних копій бази даних:
- 	Визначити директорію для збереження резервних копій, забезпечивши доступність та безпеку.
- 	Використати зовнішні інструменти (наприклад, pg_dump) для створення резервних копій бази даних.
- 	Створити унікальне ім’я файлу резервної копії на основі часу створення.
- 	Перевірити успішність створення резервної копії та повідомити адміністратора про результати.


3) Відновлення бази даних:
- 	Обрати необхідну резервну копію для відновлення даних.
- 	Використати відповідні інструменти (наприклад, pg_restore) для відновлення бази даних з резервної копії.
- 	Перевірити цілісність та коректність відновлених даних.
- 	Повідомити адміністратора про успішне або невдале відновлення.

4) Моніторинг стану бази даних:
- 	Відстежувати продуктивність бази даних, використовуючи інструменти моніторингу.
- 	Аналізувати журнали подій для виявлення потенційних проблем або аномалій.
- 	Вживати заходів для оптимізації продуктивності та вирішення виявлених проблем.

5) Управління доступом до бази даних:
- 	Налаштувати права доступу для різних ролей користувачів.

3.2.2 Головний адміністратор бази даних
Цей адміністратор відповідає за технічний стан бази даних та її працездатність.
- Функції:
- 	Налаштування бази даних, оптимізація її продуктивності.
-	Створення регулярних резервних копій даних.
-	Відновлення бази даних у разі збоїв або втрати даних.
-	Управління доступом до бази даних для інших ролей.
- 	Керування функціями бізнес-логіки.
- 	Створення звітів.

3.2.3 Клієнт системи
Клієнт – це користувач системи (студент або батьки), який має доступ до своїх даних, має можливість переглядати отримані повідомлення та у разі небезпеки роботи сповіщення про інцидент.
- Функції:
- 	Переглядання особистого профілю.
- 	Зміна деякої особистої інформації.
- 	Перегляд повідомлень.
- 	Надсилання попередження про інцидент у разі його виникнення.

3.3 Створити UML діаграму діяльності та UML діаграму взаємодій для серверної частини.

 
Рисунок 3.3.1 – UML діаграма діяльності для CRUD технологій серверної частини







 
Рисунок 3.3.2 - UML діаграма взаємодії для серверної частини

 

Рисунок 3.3.3 - UML діаграма діяльності для бізнес логіки пов’язаної з SEI


3.4 Створити програмну реалізацію бізнес логіки та функцій адміністрування серверної частини

 
Рисунок 3.4.1 – Приклад програмної реалізації бізнес-логіки для перевірки середнього значення тяжкості інцидентів

 
Рисунок 3.4.2 – Приклад програмної реалізації адміністрування (створення міграцій та бекапу)

 
Рисунок 3.4.3 – Приклад програмної реалізації бізнес-логіки для створення індексу ефективності системи безпеки навчальних закладів

4. Висновок
	Під час виконання лабораторної роботи було розроблено бізнес-логіку і адміністрування серверної частини програмної системи.
Посилання на відеозапис: https://youtu.be/Ccp0YLKusGI 
 
