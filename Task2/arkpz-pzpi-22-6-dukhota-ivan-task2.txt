Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Кафедра програмної інженерії




ЗВІТ
До лабораторної роботи №2 
З дисципліни «Аналіз та рефакторинг коду»




Виконав: 										   Перевірив:
ст. гр. ПЗПІ-22-6								    ст. викл. каф. ПІ.
Духота І. Є.  								        Сокорчук І. П.











Харків 2024
1. Тема роботи
Розробка бази даних для серверної частини програмної системи та прикладного програмного інтерфейсу.
2. Мета роботи
Розробити базу даних для серверної частини програмної системи та прикладного програмного інтерфейсу.
3. Хід роботи
3.1 Розробити будову програмної системи.
Програмна система для автоматизації та контролю безпеки навчальних закладів має клієнт-серверну архітектуру. Серверна частина реалізована за допомогою DRF(Django Rest Framework) для обробки запитів і роботи з даними. Для зберігання даних використовується база даних PostgreSQL. Комунікація з клієнтами здійснюється за допомогою веб-інтерфейсу, мобільного додатку та API для інтеграції з IoT-сенсорами безпеки. Аутентифікація відбувається за допомогою JWT.
Модулі серверної частини:
1. Авторизація та аутентифікація
- 	Реєстрація та вхід користувачів: Дозволяє створювати нові облікові записи для студентів, батьків та співробітників, а також здійснювати вхід до системи.
- 	Використання JWT для безпечної аутентифікації та авторизації користувачів: Забезпечує безпечний обмін інформацією між клієнтом та сервером шляхом використання JSON Web Tokens (JWT) для підтвердження особи користувача та надання доступу до захищених ресурсів.
2. Модуль управління користувачами
- 	Створення, перегляд, редагування та видалення користувачів: Адміністратори можуть управляти обліковими записами користувачів, включаючи студентів, батьків та співробітників.
- 	Призначення ролей користувачам: Визначає роль користувача (студент, батько, співробітник) для контролю доступу до різних частин системи.
3. Модуль управління студентами
- 	Створення, перегляд, редагування та видалення профілів студентів: Дозволяє адміністратору та співробітникам додавати нових студентів, оновлювати їхні дані та видаляти записи.
- 	Зв'язок студентів з батьками: Кожен студент може бути пов'язаний з одним або кількома батьками для полегшення комунікації та управління даними.
4. Модуль управління батьками
- 	Створення, перегляд, редагування та видалення профілів батьків: Дозволяє адміністратору та співробітникам управляти інформацією про батьків студентів.
- 	Зв'язок батьків зі студентами: Кожен батько може бути пов'язаний з певними студентами, що дозволяє відслідковувати їхню участь та взаємодію.
5. Модуль управління співробітниками
- 	Створення, перегляд, редагування та видалення профілів співробітників: Дозволяє управляти інформацією про співробітників, включаючи їхні ролі, посади та статус відвідуваності.
- 	Моніторинг статусу відвідуваності: Відстежує присутність співробітників для забезпечення ефективного управління ресурсами.
6. Модуль сенсорів та камер
- 	Збір і обробка даних з IoT-сенсорів: Включає сенсори для моніторингу різних аспектів, таких як безпека, рівень шуму, температура тощо.
- 	Управління камерами спостереження: Забезпечує контроль над камерами для відстеження подій у реальному часі та запису відео для подальшого аналізу.
7. Модуль інцидентів
- 	Реєстрація та управління інцидентами: Дозволяє створювати записи про різні інциденти, пов'язані зі студентами, співробітниками чи обладнанням.
- 	Зв'язок інцидентів із сенсорами та камерами: Інциденти можуть бути пов'язані з даними сенсорів або записами камер для детального аналізу.
- 	Оцінка та класифікація інцидентів: Визначає серйозність та категорію інцидентів для пріоритетизації відповідних дій.
8. Модуль відвідуваності
- 	Відстеження відвідуваності студентів: Забезпечує систематичний запис присутності студентів на заняттях.
- 	Аналіз та звітність: Генерує звіти про відвідуваність для адміністраторів та викладачів для подальшого аналізу та прийняття рішень.
9. Модуль сповіщень та нагадувань
- 	Відправка автоматичних сповіщень: Надсилає повідомлення користувачам (студентам, батькам, співробітникам) про критичні події, такі як відсутність на заняттях, важливі оновлення або нагадування про терміни.
- 	Нагадування про технічне обслуговування: Інформує відповідальних осіб про необхідність проведення технічного обслуговування обладнання чи інфраструктури.
10. Модуль аналітики та звітності
- 	Аналіз даних про інциденти та відвідуваність: Використовує зібрані дані для виявлення трендів, аномалій та потенційних проблем.
- 	Генерація звітів: Створює детальні звіти для адміністраторів, що допомагають у прийнятті обґрунтованих рішень щодо покращення управління та безпеки.
2) Створити UML діаграму прецедентів для серверної частини системи.
UML діаграма прецедентів серверної частини:
 
Рисунок 1 – UML діаграма прецедентів
3) Створити ER діаграму даних.
ER-діаграма даних:
 
Рисунок 2 – ER-діаграма даних
4) Розробити базу даних програмної системи:
Таблиця 1 – Таблиця БД «Users»
Поле	Тип даних	Обмеження
id	INT	Primary Key, Auto_Increment
username	VARCHAR(150)	UNIQUE, NOT NULL
password	VARCHAR(128)	NOT NULL
role	VARCHAR(10)	NOT NULL
email	VARCHAR(254)	UNIQUE, NULLABLE

Таблиця 2 – Таблиця БД «Students»
Поле	Тип даних	Обмеження
id	INT	Primary Key, Auto_Increment
user_id	INT	UNIQUE, FOREIGN KEY (Users.id), NOT NULL, NOT NULL
first_name	VARCHAR(255)	NOT NULL
last_name	VARCHAR(255)	NOT NULL
date_of_birth	DATE	NOT NULL
student_class	VARCHAR(50)	NOT NULL

Таблиця 3 – Таблиця БД «Parents»
Поле	Тип даних	Обмеження
id	INT	Primary Key, Auto_Increment
user_id	INT	UNIQUE, FOREIGN KEY (Users.id), NOT NULL, NOT NULL
first_name	VARCHAR(255)	NOT NULL
last_name	VARCHAR(255)	NOT NULL
email	VARCHAR(50)	UNIQUE, NOT NULL
phone	VARCHAR(50)	NOT NULL
student_id	INT	FOREIGN KEY (Students.id), NOT NULL



Таблиця 4 – Таблиця БД «Staff»
Поле	Тип даних	Обмеження
id	INT	Primary Key, Auto_Increment
user_id	INT	UNIQUE, FOREIGN KEY (Users.id), NOT NULL, NOT NULL
first_name	VARCHAR(255)	NOT NULL
last_name	VARCHAR(255)	NOT NULL
position	VARCHAR(255)	NOT NULL
hire_date	DATE	NOT NULL
               email


	       VARCHAR(50)

	UNIQUE, NOT NULL
Phone	VARCHAR(20)	NOT NULL
     attendance_status		BOOLEAN	DEFAULT TRUE


Таблиця 5 – Таблиця БД «Attendance»
Поле	Тип даних	Обмеження
id	INT	Primary Key, Auto_Increment
student_id	INT	FOREIGN KEY (Students.id), NOT NULL
Staff_id	INT	FOREIGN KEY (Staff.id), NOT NULL
attendance_date	DATE 	NOT NULL
status	BOOLEAN	NOT NULL

Таблиця 6 – Таблиця БД «Cameras»
Поле	Тип даних	Обмеження
id	INT	Primary Key, Auto_Increment
location	VARCHAR(255)	NOT NULL
status	BOOLEAN	DEFAULT TRUE



Таблиця 7 – Таблиця БД «Sensors»
Поле	Тип даних	Обмеження
id	INT	Primary Key, Auto_Increment
location	VARCHAR(255)	NOT NULL
status	BOOLEAN	DEFAULT TRUE
type	VARCHAR(255)	NOT NULL

Таблиця 8 – Таблиця БД «Incidents»
Поле	Тип даних	Обмеження
id	INT	Primary Key, Auto_Increment
severity	INT	NOT NULL, CHECK (severity BETWEEN 1 AND 5)


date	DATETIME	DEFAULT CURRENT_TIMESTAMP


sensor_id	INT	FOREIGN KEY (Sensors.id), NULLABLE


report	BOOLEAN	DEFAULT FALSE
type	VARCHAR(255)		NOT NULL
description	TEXT	NOT NULL

Таблиця 9 – Таблиця БД «Notifications»
Поле	Тип даних	Обмеження
id	INT	Primary Key, Auto_Increment
message	NVARCHAR(255)	            NOT NULL


date	DATETIME	DEFAULT CURRENT_TIMESTAMP


incident_id	INT	FOREIGN KEY (Incidents.id), NULLABLE


parent_id	INT	FOREIGN KEY (Parents.id), NULLABLEFALSE
staff_id	 INT		FOREIGN KEY (Staff.id), NULLABLE


5) Створити діаграму структуру БД.
Діаграма структури БД:
 
Рисунок 3 – Діаграма структури БД



6) Створити специфікацію розробленого API
1. Авторизація та аутентифікація
POST auth/register Реєстрація користувачів
POST auth/login Авторизація користувачів
2. Користувачі
GET users Отримати всіх користувачів
GET users/{id} Отримати дані певного користувача
PUT users/{id} Оновлення даних користувача
DELETE users/{id} Видалення користувача
3. Студенти
GET students Отримати всіх студентів
GET students/{id} Отримати дані певного студента
POST students Додавання нового студента
PUT students/{id} Оновлення даних студента
DELETE students/{id} Видалення студента
4. Батьки
GET parents Отримати всіх батьків
GET parents/{id} Отримати дані певного батька
POST parents Додавання нового батька
PUT parents/{id} Оновлення даних батька
DELETE parents/{id} Видалення батька
GET parents/student/{studentId} Отримати батьків певного студента
5. Співробітники
GET staff Отримати всіх співробітників
GET staff/{id} Отримати дані певного співробітника
POST staff Додавання нового співробітника
PUT staff/{id} Оновлення даних співробітника
DELETE staff/{id} Видалення співробітника
6. Сенсори
GET sensors Отримати всі сенсори
GET sensors/{id} Отримати дані певного сенсора
POST sensors Додавання нового сенсора
PUT sensors/{id} Оновлення даних сенсора
DELETE sensors/{id} Видалення сенсора
7. Камери
GET cameras Отримати всі камери
GET cameras/{id} Отримати дані певної камери
POST cameras Додавання нової камери
PUT cameras/{id} Оновлення даних камери
DELETE cameras/{id} Видалення камери
8. Інциденти
GET incidents Отримати всі інциденти
GET incidents/{id} Отримати дані певного інциденту
POST incidents Додавання нового інциденту
PUT incidents/{id} Оновлення даних інциденту
DELETE incidents/{id} Видалення інциденту
GET incidents/user/{userId} Отримати інциденти певного користувача
GET incidents/sensor/{sensorId} Отримати інциденти певного сенсора
GET incidents/camera/{cameraId} Отримати інциденти певної камери
9. Відвідуваність
GET attendance Отримати всі записи відвідуваності
GET attendance/{id} Отримати дані певного запису відвідуваності
POST attendance Додавання нового запису відвідуваності
PUT attendance/{id} Оновлення запису відвідуваності
DELETE attendance/{id} Видалення запису відвідуваності
GET attendance/student/{studentId} Отримати відвідуваність певного студента
10. Сповіщення
GET notifications Отримати всі сповіщення
GET notifications/{id} Отримати дані певного сповіщення
POST notifications Додавання нового сповіщення
PUT notifications/{id} Оновлення сповіщення
DELETE notifications/{id} Видалення сповіщення
GET notifications/user/{userId} Отримати сповіщення певного користувача
GET notifications/incident/{incidentId} Отримати сповіщення для певного інциденту

7) Створити програмну реалізацію розробленого API та функцій роботи з БД.

 
Рисунок 4 – Приклад роботи розробленого API для взаємодії серверної частини з клієнтами
 
Рисунок 5 – Приклад роботи розробленого API для взаємодії серверної частини з клієнтами

4. Висновок
Під час виконання лабораторної роботи було розроблено базу даних для серверної частини  програмної системи та прикладний програмний інтерфейс.

Посилання на YouTube відео: https://www.youtube.com/watch?v=rOnAd4sMbJY
