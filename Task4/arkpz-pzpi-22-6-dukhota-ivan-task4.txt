Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Кафедра програмної інженерії




ЗВІТ
До лабораторної роботи №4
З дисципліни «Аналіз та рефакторинг коду»




Виконав: 										   Перевірив:
ст. гр. ПЗПІ-22-6								    ст. викл. каф. ПІ.
Духота І. Є.  								        Сокорчук І. П.











Харків 2024
1. РОЗРОБКА IoT КЛІЄНТА
2. Мета роботи
Розробити програмне забезпечення для IoT або SmartDevice пристрою, створеного на базі будь-якої поширеної на сьогодні платформи, придатної для реалізації вбудованих систем (Embedded  System).
3. Хід роботи
3.1 Розробити будову програмного забезпечення IoT клієнта.
Програма на мові програмування Python буде генерувати необхідні дані для кожного сенсора у БД, за допомогою формули буде розраховуватись відсоток небезпеки який буде порівнюватися з вказаними даними кожного сенсора та надсилатися на сервер за допомогою HTTP.
Ключові особливості IoT клієнта:
3.1.1 Мова програмування: Python – для легкого моделювання роботи сенсорів.
3.1.2 Протокол зв’язку HTTP – для передачі згенерованих даних на сервер.
Функціональні можливості IoT клієнта:
3.1.3 Розрахунок відсотка небезпеки (ВН):
- 	Обчислення ВН для відображення можливості виникнення інциденту.
3.1.4 Передача даних:
- 	Надсилання результатів на сервер за допомогою HTTP.
3.1.5 Виявлення небезпеки:
- 	У разі перевищення ВН – надсилання результатів на сервер та подальша обробка.

Архітектура:
3.1.6 Модуль генерації даних:
- 	Генерація псевдовипадкового значення ВН у вказаному діапазоні.
- 	Використання бібліотеки random для генерації випадкового значення.
3.1.7 Модуль обробки даних:
- 	Перевірка кожного згенерованого значення на відповідність умовам та входженню в діапазон.
3.1.8 Модуль передачі даних:
- 	Реалізація HTTP-клієнта для передачі згенерованих значень ВН на сервер.
- 	Формат даних: JSON - "Сенсор {sensor_id}: danger_percentage={danger_percentage} | Відповідь: {response.json()}"
3.1.9 Модуль сповіщення
- 	Створення інцидентів та повідомлення у разі перевищення значення ВН за вказану норму.
3.2 Створити UML діаграму прецедентів для IoT клієнта
 
Рисунок 1 - UML діаграму прецедентів для IoT клієнта
3.3 Розробити бізнес-логіку (математичну обробку пов’язаних із предметною областю даних) та функції налаштування IoT клієнта.
Бізнес-логіка складається з математичної обробки даних про можливість виникнення небезпеки. Критеріями є стан погоді на момент роботи сенсорів та температура на вулиці. Залежно від цих показників буде розраховуватися відсоток небезпечності враховуючи начальний показник небезпеки. 
Ключові функції налаштування:
3.3.1 Налаштування порогових значень:
- 	Вказано діапазон від 0 до 100 для відсотку небезпеки.
3.3.2 Налаштування вагових коефіцієнтів:
- 	Конфігурування показників погоди та температури для розрахунку загального відсотку небезпеки.
3.3.3 Налаштування інтервалу перевірок:
- 	Кожні 20 секунд всі сенсори отримують згенеровані дані.
3.3.4 HTTP конфігурація:
- 	Встановлення посилань на JWT та API, персональні дані користувача такі як пароль та ім’я.
3.4 Створити діаграму діяльності для ІоТ клієнта.
 
Рисунок 2 – Діаграма діяльності для ІоТ клієнта
3.5 Створити програмну реалізацію бізнес логіки та функцій налаштування ІоТ клієнта.
Приклад програмної реалізації розрахунку відсотку небезпеки:
1.	def get_sensors(token):
2.	print("Отримання всіх сенсорів...")
3.	sensors = get_all_data_from_paginated_endpoint('http://localhost:8000/api/sensors/', token)
4.	sensors = [sensor for sensor in sensors if sensor['type'] != 'intrusion']
5.	print(f"Отримано {len(sensors)} сенсорів.")
6.	return sensors

7.	def get_cameras(token):
8.	print("Отримання всіх камер...")
9.	cameras = get_all_data_from_paginated_endpoint('http://localhost:8000/api/cameras/', token)
10.	print(f"Отримано {len(cameras)} камер.")
11.	return cameras

12.	def generate_weather_conditions():
13.	temperature = random.uniform(-10, 40)
14.	weather_conditions = random.choice(["Clear", "Rain", "Snow", "Fog", "Storm"])
15.	weather_risk = {
a.	"Clear": 1.0,
b.	"Rain": 1.2,
c.	"Snow": 1.5,
d.	"Fog": 1.3,
e.	"Storm": 1.3
16.	}[weather_conditions]
17.	return temperature, weather_conditions, weather_risk

18.	def calculate_danger_percentage(temperature, weather_risk):
19.	base_danger = 10
20.	temperature_risk = max(0, (temperature - 25) * 2) if temperature > 25 else max(0, (10 - temperature) * 3)
21.	danger_percentage = base_danger + (temperature_risk * weather_risk)
22.	return min(100, max(1, int(danger_percentage))) 

23.	def main():
24.	token = get_jwt_token()
25.	if not token:
a.	return

26.	sensors = get_sensors(token)
27.	if not sensors:
a.	print('Сенсорів не знайдено.')
b.	return

28.	cameras = get_cameras(token)
29.	if not cameras:
a.	print('Камер не знайдено.')
b.	return

30.	camera_ids = [camera['id'] for camera in cameras]

31.	print(f"Знайдено {len(sensors)} сенсорів та {len(camera_ids)} камер.")

32.	while True:
a.	for sensor in sensors:
i.	sensor_id = sensor['id']
ii.	sensor_type = sensor['type']
iii.	sensor_location = sensor['location']

iv.	temperature, weather_conditions, weather_risk = generate_weather_conditions()

v.	danger_percentage = calculate_danger_percentage(temperature, weather_risk)

vi.	camera_id = random.choice(camera_ids)

vii.	description = (
1.	f"Увага, {sensor_type} відбувається у {sensor_location}. "
2.	f"Температура: {temperature:.1f}°C, Погода: {weather_conditions}."
viii.	)

ix.	current_date = datetime.now().isoformat()
x.	payload = {
1.	'sensor_id': sensor_id,
2.	'camera_id': camera_id,
3.	'type': sensor_type,
4.	'description': description,
5.	'danger_percentage': danger_percentage,
6.	'date': current_date
xi.	}

xii.	headers = {
1.	'Authorization': f'Bearer {token}',
2.	'Content-Type': 'application/json'
xiii.	}

xiv.	try:
1.	response = requests.post(API_URL, json=payload, headers=headers)
2.	if response.status_code in [200, 201]:
a.	print(f"Сенсор {sensor_id}: danger_percentage={danger_percentage} | Відповідь: {response.json()}")
3.	else:
a.	print(f"Сенсор {sensor_id}: Не вдалося відправити дані | Статус: {response.status_code} | Повідомлення: {response.text}")
xv.	except Exception as e:
1.	print(f"Сенсор {sensor_id}: Помилка при відправці даних | Помилка: {e}")

b.	time.sleep(20)

33.	if __name__ == "__main__":
34.	main()

Приклад налаштувань IoT клієнта:
import requests
import time
import random
from datetime import datetime

API_URL = 'http://localhost:8000/api/sensor-data/' 
TOKEN_URL = 'http://localhost:8000/api/token/'      
USERNAME = 'root'                                 
PASSWORD = 'root'                                 

def get_jwt_token():
    response = requests.post(TOKEN_URL, data={'username': USERNAME, 'password': PASSWORD})
    if response.status_code == 200:
        return response.json().get('access')
    else:
        print('Не вдалося отримати токен:', response.text)
        return None

def get_all_data_from_paginated_endpoint(url, token):
    headers = {'Authorization': f'Bearer {token}'}
    data = []
    while url:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            response_data = response.json()
            data.extend(response_data.get('results', []))
            url = response_data.get('next')
        else:
            print(f'Не вдалося отримати дані з {url}:', response.text)
            break
    return data

4. Висновок
В ході виконання лабораторної роботи було розроблено програмне забезпечення для IoT.
Посилання на відеозапис: https://youtu.be/sw-lBsZyuIk

