МІНІСТЕРСТВО ОСВІТИ ТА НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ




Кафедра програмної інженерії



ЗВІТ
З дисципліни «Аналіз та рефакторинг коду»
З практичного заняття №2
На тему: «Методи рефакторингу коду програмного забезпечення»





Виконав										   Перевірив:
ст. гр. ПЗПІ-22-6							          доц. Сокорчук І.П.
Духота І. Є.






Харків 2024
1.	Практичне заняття №2
1.1	Тема роботи:
Методи рефакторингу коду програмного забезпечення .
1.2 Мета роботи:
Опанувати основні методи рефакторингу коду на основі реальних прикладів із власних програмних проєктів. Я повинен навчитися ідентифікувати проблеми в коді та використовувати відповідні методи рефакторингу для покращення його якості. Це допоможе мені розвинути практичні навички, які важливі для створення більш структурованого, зрозумілого та підтримуваного коду в майбутніх проєктах.
1.3 Хід роботи
1)  Було обрано мову програмування Haskell для аналізу та рефакторингу коду з метою покращення його якості.
2) Виконано рефакторинг існуючого коду у відповідності до таких методів:
a)	Pull Up Field (ДОДАТОК Б):
•	Перенесення спільних полів в батьківський клас або структуру для повторного використання.
•	Створення спільної базової структури для елементів, де поля для всіх елементів можна використовувати без дублювання коду.
b)	Replace Type Code with Subclasses (ДОДАТОК В):
•	Заміна використання типу для визначення поведінки на підкласи (чи варіанти) з конкретними методами.
•	Створення підкласів для кожного елементу, щоб кожен тип елементу мав свою власну характеристику як поведінку.
c)	Change Reference to Value (ДОДАТОК Г):
•	Заміна посилання на значення для покращення передбачуваності і уникнення проблем з мутабельністю.
•	Змінено структуру даних так, щоб використовувати значення, а не посилання, тим самим зробивши їх незмінними.
3) Підготовлено презентацію, яка містить:
•	Демонстрацію кожного методу рефакторингу на реальних прикладах.
•	Висновки щодо переваг застосованих методів.
	1.5 Висновок
	У ході роботи було вивчено та реалізовано три основні методи рефакторингу: Pull Up Field, Replace Type Code with Subclasses та Change Reference to Value. Завдяки їх використанню вдалося покращити структуру коду, зменшити дублювання та підвищити його читабельність. Рефакторинг зробив код більш безпечним, зрозумілим і легшим для підтримки, що позитивно впливає на загальну якість програмного забезпечення. Отриманий досвід сприятиме покращенню підходів до розробки в майбутніх проєктах.

Посилання на GitHub: https://github.com/NureDukhotaIvan/arkpz-pzpi-22-6-dukhota-ivan 
Посилання на YouTube: https://www.youtube.com/watch?v=05S4ISHP9F8





ДОДАТОК А
Слайди презентації:
 
Рисунок А.1 – Перший слайд презентації
Рисунок А.2 – Другий слайд презентації
Рисунок А.3 – Третій слайд презентації
Рисунок А.4 – Четвертий слайд презентації
Рисунок А.5 – П’ятий слайд презентації
Рисунок А.6 – Шостий слайд презентації
Рисунок А.7 – Сьомий слайд презентації
Рисунок А.8 – Восьмий слайд презентації
Рисунок А.9 – Дев’ятий слайд презентації
Рисунок А.10 – Десятий слайд презентації
Рисунок А.11 – Одинадцятий слайд презентації





ДОДАТОК Б
	
1.	–код до рефакторингу
2.	--Перший метод: до рефакторингу
3.	data Circle = Circle { radius :: Double }
4.	data Square = Square { side :: Double }

5.	calculateAreaCircle :: Circle -> Double
6.	calculateAreaCircle (Circle r) = pi * r * r

7.	calculateAreaSquare :: Square -> Double
8.	calculateAreaSquare (Square s) = s * s

9.	--Другий метод: до рефакторингу

10.	data Vehicle = Car | Bike | Truck

11.	vehicleSpeed :: Vehicle -> Int
12.	vehicleSpeed Car = 120
13.	vehicleSpeed Bike = 50
14.	vehicleSpeed Truck = 80

15.	--Третій метод: до рефакторингу
16.	data User = User { name :: String, age :: Int }

17.	getOlder :: User -> User
18.	getOlder user = user { age = (age user) + 1 }

19.	changeUserName :: User -> String -> User
20.	changeUserName user newName = user { name = newName }






ДОДАТОК Г
a.	Код після рефакторингу
2.	--Перший метод: після рефакторингу
3.	data Shape = Circle { radius :: Double } | Square { side :: Double }

4.	calculateArea :: Shape -> Double
5.	calculateArea (Circle r) = pi * r * r
6.	calculateArea (Square s) = s * s

7.	--Другий метод: після рефакторингу
8.	data Vehicle = Car | Bike | Truck

9.	class VehicleClass a where
10.	speed :: a -> Int

11.	data Car = Car
12.	data Bike = Bike
13.	data Truck = Truck

14.	instance VehicleClass Car where
15.	speed _ = 120

16.	instance VehicleClass Bike where
17.	speed _ = 50

18.	instance VehicleClass Truck where
19.	speed _ = 80

20.	--Третій метод: після рефакторингу
21.	data User = User { name :: String, age :: Int }

22.	getOlder :: User -> User
23.	getOlder user = User { name = name user, age = age user + 1 }

24.	changeUserName :: User -> String -> User
25.	changeUserName user newName = User { name = newName, age = age user }

